[
  
      {
        "title"    : "Authentification",
        "category" : "API",
        "tags"     : "",
        "url"      : "https://sigrennesmetropole.github.io/rudi_documentation/api/authentification/",
        "date"     : "2022-03-22 08:57:04 +0000",
        "excerpt"  : "Authentification des fournisseurs de données\n",
        "content"  : "Authentification des fournisseurs de données\n\nLes fournisseurs de données pour publier des métadonnées doivent s’authentifier en OAuth2.\n\nPour cela, il faut :\n\n  Déclarer le fournisseur dans RUDI Portail (µPoviders)\n  Déclarer chaque noeud du fournisseur dans RUDI Portail (µPoviders)\n  \n    A chaque noeud est associé un utilisateur de type ROBOT  (µACL). L’utilisateur possède :\n\n    \n      un client_id sous la forme d’un UUID V4\n      un client_secret\n    \n  \n\n\nLe noeud fournisseur peut alors s’authentifier comme suit :\n\n\ncurl -v --request POST http://&lt;server&gt;:&lt;port&gt;/oauth/token --data \"grant_type=password\" --data \"username=&lt;username&gt;\" --data \"password=&lt;client_password&gt;\" --data \"scope=&lt;liste des scopes séparés par des virgules&gt;\" --data \"client_id=&lt;client_id&gt;\" -H \"Authorization:Basic &lt;encodage en base 64 de la chaine &amp;lt:client_id:client_password&gt;\"\n\n\n\n\nContrôle de l’authentification appel du Portail RUDI vers un fournisseur de données\n\nLorsque le portail vient moissonner des données d’un fournisseur de données ou lorsque le portail vient soumettre un rapport d’intégration, l’appel comporte une entête d’authorization de type “Bearer”.\n\nExemple :\n\nAuthorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJydWRpIiwiY29ubmVjdGVkVXNlciI6eyJsb2dpbiI6InJ1ZGkiLCJ0eXBlIjoiUEVSU09OIiwiZmlyc3RuYW1lIjoicnVkaSIsImxhc3RuYW1lIjoicnVkaSIsImVtYWlsIjpudWxsLCJvcmdhbml6YXRpb24iOiJydWRpIiwicm9sZXMiOlsiQURNSU5JU1RSQVRPUiJdfSwiZXhwIjoxNjE0NjE5Nzc2LCJpYXQiOjE2MTQ2MTYxNzZ9.Em7yclposciDOll-Dgv9O6jGDE-GsVEHp9dYKyfYNCyPTAambdGqtnl--Zw0DidCf0_JCghXlpznMIteUPdHnQ\n\n\nLe fournisseur de données peut valider ce token en réalisant l’appel suivant vers le portail :\n\n\ncurl -v --request GET http://&lt;server&gt;:&lt;port&gt;/oauth/check_token?token=&amp;ltvaleur du token&gt;\n\n\nAuthentification des porteurs de projets\n\nLorsqu’un porteur de projet souhaite utiliser un jeu de données exposé par le portail, il peut le faire\n\n  soit en son nom. C’est le cas de tous les jeux de données à accès restreint et c’est aussi le cas si le porteur de projet souhaite une qualité de service particulière. Il est important de noter que pour effectuer ce mode d’authentification, il faut un utilisateur Rudi (création de compte depuis le portail) et que cet utilisateur ait souscrit aux différents jeux de données.\n  soit en tant qu’utilisateur anonyme. Cette possibilité est proposée afin de permettre à un porteur de réaliser des essais rapidement. Le mot de passe de cet utilisateur est “anonymous” et son login est “anonymous”.\n\n\nDans le cas d’une utilisation en tant qu’utilisateur anonyme, il faut :\n\n  s’authentifier auprès du portail en tant que “anonymous” et récupérer un token JWT Rudi\n\n\n\ncurl -v -X POST https://rudi.bzh/token -d \"grant_type=password&amp;username=anonymous&amp;password=anonymous\" -H \"Authorization: Basic TEgxT1o1T3JMZmRFcXlRdkozcEFvUzhieFFNYTpYYWdmOENRdEpzak1UV09pdnBueGxjbTczb0lh\"\n\n\n\n  à partir du token il est alors possible d’accéder aux APIs de téléchargement comme suit :\n\n\nAppel de l’API de téléchargement pour le media souscrit :\n\ncurl -v -X GET  \"https://rudi.bzh/medias/eef6832f-6a06-4f65-8f95-a533ac8926a7/dwnl/1.0.0\" -H \"Authorization: Bearer [l'access token retourné par l'appel précédent]\" \n\n\nPour une accès en son nom propre (éléments en cours de définition coté portail et non disponible actuellement sur rudi.bzh), il faut :\n\n  Se connecter sur le portail avec son compte utilisateur\n  Accéder au détail du compte\n  Activer l’utilisation des APIs\n  Récupérer le couple “customer_key”/customer_secret”\n  Utiliser ce couple pour s’authentifier :\n\n\n\ncurl -kv -X POST -H \"Authorization: Basic [base64(customer_key:customer_secret)]\" -d \"grant_type=client_credentials&amp;username=[login du user sur le portail associé au customer_key]&amp;scope=apim:subscribe apim:app_manage\" -H \"Content-Type:application/x-www-form-urlencoded\" https://rudi.bzh/apim/oauth2/token\n\n\nCet appel permet de récupérer un token.\n\n\n  à partir du token il est alors possible d’accéder aux APIs de téléchargement comme suit :\n\n\n\ncurl -kv -X POST -H \"Authorization: Bearer \" https://rudi.bzh/apim/datasets/02777fcb-c0bd-4d89-830a-8070cfb89261/dwnl/1.0.0\n&lt;/pre&gt;\n\n"
      },
      {
        "title"    : "Contrat portail nœud producteur",
        "category" : "API",
        "tags"     : "",
        "url"      : "https://sigrennesmetropole.github.io/rudi_documentation/api/contrat-portail-noeud-producteur/",
        "date"     : "2022-03-22 08:57:04 +0000",
        "excerpt"  : "Note Technique de spécification d'interface\n",
        "content"  : "Note Technique de spécification d'interface\n\n#\n1. Contexte\n\nL'objet du présent document est de définir le contrat d'interface en termes d'API REST entre le portail RUDI et un nœud producteur RUDI.\n\nLe portail RUDI étant décomposé en micro-services, la communication entre un nœud producteur et le portail RUDI se fait au travers du micro-services « µKollect ».\n\n#\n2. Collecte des métadonnées\n\nLa collecte des métadonnées est réalisée par le module « Mise à jour catalogue ».\n\nLe module fonctionne selon 2 modes :\n\n\n  Mode « notification » (ou push depuis le nœud producteur)\n  Mode « moissonnage » (ou pull depuis le portail)\n\n\n1.1. Collecte en mode « Notification »\n\nEn mode « notification », le diagramme de séquence d'appel est le suivant :\n\n\n\nFigure 1 - Diagramme de séquence \"notification\"\n\nComme l'indique le schéma ci-dessus, le nœud producteur peut appeler le module de collecte (µKollect) du portail RUDI afin de déposer une demande de collecte. Cette demande comporte :\n\n\n  L'identifiant unique du jeu de données\n  La nature de la modification : création, modification des métadonnées ou suppression d'un jeu de données.\n  Les métadonnées du jeu de données\n\n\nLors de la réception de ce message, le module de collecte va l'ajouter dans la pile des demandes à traiter persistée en base de données et envoie un accusé de réception au nœud producteur.\n\nLe module de collecte va dépiler de manière asynchrone la liste des messages afin de réaliser les opérations demandées.\n\nA l'issue du traitement, le module de collecte envoie au nœud producteur un rapport d'intégration indiquant le résultat de l'intégration et éventuellement des informations de qualité des métadonnées.\n\n1.2. Collecte en mode « Moissonnage »\n\nEn mode « moissonnage », le diagramme de séquence d'appel est le suivant :\n\n\n\nFigure 2 - Diagramme de séquence \"moisonnage\"\n\nComme l'indique le schéma ci-dessus, le module de collecte des données du portail RUDI commence par appeler le nœud producteur afin de collecter par leur identifiant unique tous les jeux de données dont les métadonnées ont été modifiées depuis la dernière date de collecte réussie.\n\nLes modifications peuvent être des créations, des mises à jour ou des suppressions de jeux de données.\n\nPour chaque jeu de données créé ou modifié qui a été identifié par l'opération précédente, le module de collecte appelle le nœud producteur afin de récupérer les métadonnées.\n\nLe module de collecte traite ensuite de manière asynchrone l'intégration des données et la suppression des jeux de données.\n\nPour chaque jeu de données traité, le module de collecte envoi au nœud producteur d'origine un rapport d'intégration indiquant le résultat de l'intégration.\n\nCe rapport d'intégration à vocation à permettre à un nœud producteur de ne fonctionner que par moissonnage et d'être ainsi informé qu'un jeu de données particulier a été intégré dans le portail.\n\n#\n3. contrat d'interface Portail / nœud PRODUCTEUR\n\n3.1. Périmètre\n\nLe contrat d'interface RUDI/Producteur porte sur les grands thèmes suivants :\n\n\n  Jeux de données\n    \n      L'interface proposée doit permettre au portail RUDI d'accéder aux données des jeux de données publiés dans le portail RUDI par un nœud producteur.\n      Chaque jeu de données doit être identifié de manière unique au sein de RUDI.\n    \n  \n  Métadonnées\n    \n      L'interface proposée doit permettre au portail RUDI :\n      La collecte des métadonnées d'un jeu de données proposé par le producteur à partir de l'identifiant unique\n      La notification de l'intégration des métadonnées d'un jeu de données\n      L'interface proposée par RUDI doit permettre aux producteurs de notifier la modification des métadonnées d'un jeu de données.\n    \n  \n  Données\n    \n      L'interface proposée doit permettre au portail RUDI de récupérer les données d'un jeu de données.\n      Cette récupération doit pouvoir être réalisée en fonction de l'utilisateur humain ou non ayant demandé les données mais aussi si possible en prenant en compte les notions de pagination, de tri et de filtrage par critère temporel, géographique et par mots-clefs.\n    \n  \n  Consentement\n    \n      L'interface proposée doit permettre au portail RUDI de transférer au producteur de données, les informations de consentement recueillies par RUDI auprès des utilisateurs. Ce consentement doit être pris en compte lors de la récupération des données.\n    \n  \n  Supervision\n    \n      L'interface proposée doit permettre au portail RUDI de superviser le nœud du producteur afin de prendre en compte la qualité de service associée.\n    \n  \n\n\nPour certains producteurs, le contrat d'interface doit aussi couvrir le thème suivant :\n\n\n  Appariement\n\n\nL'interface proposée doit permettre au portail RUDI et au producteur de réaliser l'appariement (mise en correspondance) d'un utilisateur RUDI et d'un utilisateur connu du système du producteur)\n\n3.2. Schéma de données\n\n3.2.1. Format des dates\n\nLes dates sont au format ISO-8601 et prennent la forme :\n\n\n  YYYY-MM-DD pour les dates\n    \n      Exemple : 2020-12-14\n    \n  \n  YYYY-MM-DDTH24:MI:SS.nano pour les « date+heure » - ce format est nommé « Timestamp » dans le reste du document.\n    \n      Exemple : 2020-12-14T09:56:34.592384024\n    \n  \n  YYYY-MM-DDTH24:MI:SS.nano&lt;+/- timezone offset ou Z pour UTC&gt; pour les « date+heure avec time-zone » - ce format est nommé « Timestamp avec time-zone » dans le reste du document.\n    \n      Exemple : 2020-12-14T09:56:34.592384024+0100\n    \n  \n\n\n3.2.2. Rapport d'intégration – #/components/schemas/Report\n\n3.2.2.1. Généralité\n\nLe rapport d'intégration est de la forme suivante :\n\n{\n  'report\\_id': '',\n  'submission\\_date': '',\n  'treatment\\_date': '',\n  'method' : ('POST'|'PUT'|'DELETE')\n  'version':'',\n  'global\\_id': '',\n  'resource\\_title': '',\n  'integration\\_status': ('OK'|'KO'),\n  'comment': '',\n  'errors': [\n    {\n      'error\\_code': '',\n      'error\\_message': ''\n      'field\\_name': '',\n    }\n  ]\n}\n\n\n3.2.2.2 Détail des données\n\nLe tableau ci-dessous présente les données présentes dans le rapport d'intégration et leurs caractéristiques.\n\n\n  \n    \n      Nom balise\n      Description\n      Niveau\n      Obligatoire\n      Type\n      Taille\n    \n  \n  \n    \n      report_id\n      Identifiant du rapport d'intégration\n      1\n      Oui\n      UUID v4\n       \n    \n    \n      submission_date\n      Date de soumission de la demande d'intégration\n      1\n      Oui\n      Timestamp\n       \n    \n    \n      treatment_date\n      Date de traitement de l'intégration du jeu de donnéesdans Rudi\n      2\n      Oui\n      Timestamp\n       \n    \n    \n      version\n      Numéro de la version de l'API utilisée par le nœud producteur pour communiquer avec le portail RUDI\n      1\n      Oui\n      Numérique\n      2\n    \n    \n      method\n      Méthode de soumission utilisée\n      1\n      Oui\n      Enuméré\n      6\n    \n    \n      resource_id\n      Identifiant du jeu de donnéesdans le système Rudi\n      2\n      Oui\n      UUID v4\n       \n    \n    \n      title\n      Nom du jeu de données\n      2\n      Non\n      Texte\n      Identique à lAPI\n    \n    \n      Integration_status\n      État de l'intégration du jeu de donnéesdans Rudi. 2 valeurs possibles :·OK : l'intégration du jeu de données s'est bien déroulée·KO : l'intégration du jeu de données est en erreur\n      2\n      Oui\n      Enuméré\n      2\n    \n    \n      comment\n      Commentaire sur l'état de l'intégration. Formaté.·Si etat_integration = OK, commentaire = l'intégration du jeu de données\"nom_jeu_de_donnee\" s'est bien déroulée le \"date_traitement_jdd_Rudi\".·Si etat_integration = KO, commentaire = l'intégration du jeu de données\"nom_jeu_de_donnee\" ne s'est pas déroulée correctement, le \"date_traitement_jdd_Rudi. Veuillez consulter les erreurs ci-dessous et après correction des erreurs, renvoyer votre jeu de données. Pour plus d'information, vous pouvez contacter votre administrateur Rudi.\".\n      2\n      Oui\n      Texte\n      255\n    \n    \n      errors\n      Liste des erreurs rencontrées lors de l'intégration du jeu de données. L'objectif est de lister l'ensemble des erreurs rencontrées sur le jeu de données afin d'éviter de multiple envoi pour un même jeu de données(à chaque envoi, une nouvelle erreur est rencontrée).\n      2\n      Fonction de « status » :·Non si etat_integration = 1·Oui si etat_integration = 0\n      Liste dobjets\n      Infini\n    \n    \n      error_code\n      Code technique de l'erreur(Cf. 3.2.2.3)\n      3\n      Oui\n      Texte\n      7\n    \n    \n      field_name\n      Nom du champ concerné par l'erreur (le cas échéant)\n      3\n      Non\n      Texte\n      30\n    \n    \n      error_message\n      Descriptif de l'erreur(Cf 3.2.2.3)\n      3\n      Oui\n      Texte\n      255\n    \n  \n\n\n3.2.2.3. Détail des erreurs possibles\n\nLe tableau ci-dessous liste les différents cas d'erreur possibles.\n\n\n  \n    \n      code_erreur\n      commentaire_erreur\n    \n  \n  \n    \n      ERR-101\n      Le format du fichier de métadonnées transmis est incorrect.\n    \n    \n      ERR-102\n      La balise \"nom_balise\" est inconnue\n    \n    \n      ERR-103\n      Le paramètre \"nom_parametre\" est manquant\n    \n    \n      ERR-104\n      Autres erreurs d'intégration\n    \n    \n      ERR-105\n      Erreur inconnue: l'erreur n'a pas été reconnue, veuillez contacter l'administrateur Rudi afin d'analyser l'erreur.\n    \n    \n      ERR-106\n      La version de metadonnées \"api_version\" n’est pas supportée. La version courante est X.X.X\n    \n    \n      ERR-1XX\n      …. Erreurs de base, à définir.\n    \n    \n      ERR-201\n      Le type du champ \"nom_champ\" n'est pas le bon (format attendu : \"format attendu\" / format reçu : \"format_reçu\" )\n    \n    \n      ERR-202\n      Le champ \"nom_champ\" est manquant alors qu'il est obligatoire.\n    \n    \n      ERR-203\n      La longueur du champ dépasse la limite autorisée: la taille attendue est \"taille_champ_Rudi\" pour \"nom_champ\" alors que la longueur de la valeur envoyée est \" taille_champ_envoye\").\n    \n    \n      ERR-2XX\n      …. Erreurs sur le type du champ, à définir.\n    \n    \n      ERR-301\n      Des caractères ne sont pas acceptés dans le \"nom_champ\"\n    \n    \n      ERR-302\n      La valeur saisie ne correspond pas au référentiel des valeurs attendues pour le champ \"nom_champ\" (valeur saisie : \"valeur_saisie\" / référentiel attendu : \"liste des valeurs attendue séparées par des virgules\"\n    \n    \n      ERR-303\n      La valeur saisie \"valeur_saisie\" pour le champ \"nom_champ\" ne correspond pas à un code de concept SKOS connu\n    \n    \n      ERR-304\n      La valeur saisie \"valeur_saisie\" pour le champ \"nom_champ\" est déjà utilisée\n    \n    \n      ERR-3XX\n      … Erreur en lien avec les valeurs d'un champ, à définir.\n    \n    \n      ERR-403\n      Le nœud fournisseur authentifié n’est pas le créateur du jeu de données\n    \n    \n      ERR-500\n      Une erreur technique est survenue. Veuillez contacter l’administrateur Rudi pour analyser l’erreur.\n    \n    \n      ERR-XXX\n      … Autres types d'erreurs, autres erreurs, à définir.\n    \n  \n\n\n3.2.3. Identifiant Rudi\n\nL'identifiant d'un jeu de données RUDI est une chaîne de caractères composée comme suit :\n\n&lt;UUID v4&gt;\n\n\nL'expression régulière permettant de définir un tel champ est la suivante :\n\n/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n\n\n3.2.4** Métadonnées d'un jeu de données – Rudi #/components/schemas/Metadata**\n\nCet objet représente l'ensemble des métadonnées d'un jeu de données (Cf. 4.1).\n\n3.2.5. Liste de métadonnées – #/component/schemas/MetadataList\n\n{\n  'total': &lt;int64&gt;,\n  'items': [\n    #/components/schemas/Metadata\n  ]\n}\n\n\n\n  \n    \n      Nom balise\n      Description\n      Niveau\n      Obligatoire\n      Type\n      Taille\n    \n  \n  \n    \n      total\n      Nombre total d'éléments répondant à la requête\n      1\n      Oui\n      Int64\n       \n    \n    \n      items\n      Liste des métadonnées\n      1\n      Oui\n      List d'objet de type Metadata\n       \n    \n  \n\n\n3.3. URL d'accès et gestion du versionnement\n\nLes différentes API sont exposées avec une URL de la forme : &lt;host&gt;/&lt;prefixe&gt;\n\n\n  &lt;prefixe&gt; prendra la forme api par défaut mais peut prendre d'autres formes si plusieurs typologie d'API sont exposées.\n    \n      Exemple &lt;host&gt;/api\n    \n  \n\n\nL'API dans sa version la plus récente sera exposée en &lt;host&gt;/&lt;prefixe&gt;/*\n\nCela signifie que la version la plus récente de l'API est accessible directement sans changement de code des appelants.\n\nLes API dans les versions plus anciennes seront exposées en\n\n&lt;host&gt;&lt;prefixe&gt;&lt;version&gt;/*\n\n\n\n  &lt;version&gt; prendra la forme v&lt;Majeur&gt; ou v&lt;Majeur&gt;.&lt;Mineur&gt;\n    \n      Exemple : &lt;host&gt;/api/v1 ou &lt;host&gt;/api/v1.1\n    \n  \n\n\nCela signifie que les modifications de niveau « Révision » n'ont pas d'impact sur la version de l'API.\n\nDans la mesure du possible, seul le niveau &lt;Majeur&gt; sera utilisé.\n\n3.4. Contrat d'interface Jeu de données &amp; Métadonnées\n\n3.4.1. Service Portail\n\n3.4.1.1. URL &amp; préfixe\n\nLes différents services décrits ci-après seront accessibles avec le préfixe « api ».\n\n\n  Exemple &lt;host&gt;/api/*\n\n\n##\n\n3.4.1.2. Création d'un jeu de données\n\nDescription :\n\nSoumission d'une demande de création d'un jeu de données par ses métadonnées\n\nPOST &lt;&gt;/resources\n\nBody :\n\n\n  #/components/schemas/Metadata\n\n\nCode retour :\n\n\n  200 : prise en compte de la demande\n    \n      report_id : UUID V4\n    \n  \n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\n3.4.1.3. Modification des métadonnées d'un jeu de données\n\nDescription :\n\nSoumission d'une demande de modification d'un jeu de données par ses métadonnées\n\nPUT &lt;&gt;/resources\n\nBody :\n\n\n  #/components/schemas/Metadata\n\n\nCode retour :\n\n\n  200 : prise en compte de la demande\n    \n      report_id : UUID V4\n    \n  \n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  404 : le global_id contenu dans la métadonnée est inconnu\n    \n      $ref: \"#/components/responses/Error404NotFound\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\n3.4.1.4. Suppression d'un jeu de données\n\nDescription :\n\nSoumission d'une demande de suppression d'un jeu de données\n\nDELETE &lt;&gt;/resources/{global_id}\n\nCode retour :\n\n\n  200 : prise en compte de la demande\n    \n      report_id : UUID V4\n    \n  \n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  404 : le global_id contenu dans la métadonnée est inconnu\n    \n      $ref: \"#/components/responses/Error404NotFound\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\n3.4.1.5. Obtention d'un Identifiant RUDI\n\nDescription :\n\nDemande de génération d'un identifiant RUDI (UUID v4).\n\nL’identifiant RUDI généré tiendra compte des informations contenues dans le token JWT d'authentification pour déduire le producteur.\n\nGET &lt;&gt;/resources/id_generation\n\nCode retour :\n\n\n  200 : prise en compte de la demande\n    \n      #/components/schémas/RudiId\n    \n  \n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  404 : le global_id contenu dans la métadonnée est inconnu\n    \n      $ref: \"#/components/responses/Error404NotFound\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\n3.4.2. Service Noeud\n\n3.4.2.1. URL &amp; préfixe\n\nLes différents services décrits ci-après seront accessibles avec le préfixe « api ».\n\n\n  Exemple &lt;host&gt;/api/*\n\n\n3.4.2.2. Recherche des jeux de données\n\nDescription :\n\nRecherche des jeux de données\n\nGET &lt;&gt;/resources\n\nQuery :\n\n\n  limit : int32\n  offset : int32\n  update_date_min : timestamp\n  update_date_max : timestamp\n  &lt;à compléter&gt;\n\n\nCode retour :\n\n\n  200 : prise en compte de la demande\n    \n      #/components/schémas/ResourceListInfo\n    \n  \n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  404 : le global_id contenu est inconnu\n    \n      $ref: \"#/components/responses/Error404NotFound\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  410 :\n    \n      $ref: \"#/components/responses/Error410Gone\"\n    \n  \n  423 :\n    \n      $ref: \"#/components/responses/Error423Locked\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\n&lt;à compléter&gt;\n\n3.4.2.3. Obtention d'un jeu de données\n\nDescription :\n\nObtention des métadonnées d'un jeux de données\n\nGET &lt;&gt;/resources/{global_id}\n\nCode retour :\n\n\n  200 : prise en compte de la demande\n    \n      #/components/schémas/RudiId\n    \n  \n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  404 : le global_id contenu est inconnu\n    \n      $ref: \"#/components/responses/Error404NotFound\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  410 :\n    \n      $ref: \"#/components/responses/Error410Gone\"\n    \n  \n  423 :\n    \n      $ref: \"#/components/responses/Error423Locked\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\n3.4.2.4. Réception d'un résultat d'intégration\n\nDescription :\n\nRéception de l'intégration d'une demande réalisée par les services 3.4.1.2, 3.4.1.3, 3.4.1.4..\n\nPUT &lt;&gt;/resources/{global_id}/report\n\nBody : #/components/schemas/Report\n\nCode retour :\n\n\n  200 : Prise en compte du rapport\n  400 :\n    \n      $ref: \"#/components/responses/Error400BadRequest\"\n    \n  \n  401 :\n    \n      $ref: \"#/components/responses/Error401Unauthorized\"\n    \n  \n  403 :\n    \n      $ref: \"#/components/responses/Error403Forbidden\"\n    \n  \n  404 : le global_id contenu dans la métadonnée est inconnu\n    \n      $ref: \"#/components/responses/Error404NotFound\"\n    \n  \n  406 :\n    \n      $ref: \"#/components/responses/Error406NotAcceptable\"\n    \n  \n  408 :\n    \n      $ref: \"#/components/responses/Error408RequestTimeout\"\n    \n  \n  429 :\n    \n      $ref: \"#/components/responses/Error429TooManyRequests\"\n    \n  \n  500 :\n    \n      $ref: \"#/components/responses/Error500InternalServer\"\n    \n  \n  503 :\n    \n      $ref: \"#/components/responses/Error503ServiceUnavailable\"\n    \n  \n\n\nLes codes suivants impliquent que le portail doit retenter de notifier le nœud producteur du traitement de sa demande :\n\n400, 401, 408, 429, 503\n\nLe portail retentera l'opération 5 fois à 1 heure d'intervalle.\n\nAu-delà de ce délai, une alerte doit être remontée côté portail pour une prise charge humaine.\n\n3.4.3. Exemple de séquencement des appels\n\n3.4.3.1. Notification\n\nLe mécanisme de notification prend place lorsqu'un nœud producteur souhaite informer le portail de la publication (ou republication) d'un jeu de données.\n\nPar exemple, lors de la création d'un nouveau jeu de données par le producteur, le séquencement des appels entre portail et nœud producteur est le suivant :\n\n\n  Obtention par le nœud d'un token JWT. Ce Point sera détaillé par ailleurs\n  Si le producteur le souhaite, il peut demander un identifiant unique auprès du portail (GET &lt;&gt;/resources/generation_id). Cet identifiant unique est appelé « global_id ».\n  Attribution par le nœud producteur de l'identifiant au nouveau jeu de données\n  Soumission par le nœud d'une demande de création (POST &lt;&gt;/resources) avec la structure de métadonnées attendue\n    \n      Réponse du portail par un code 200 avec un identifiant unique correspondant à la demande. Cet identifiant est appelé « report_id ».\n    \n  \n  Le portail traite la demande de manière asynchrone (mais dans l'ordre des demandes) et à l'issue de ce traitement le portail appelle le nœud d'origine pour lui transmettre le rapport d'intégration (PUT &lt;&gt;/resources/report/{global_id}\n    \n      Réponse du portail par un code 200\n      Ou pour les codes 400, 401, 408, 429, 503, 5 nouvelles tentatives possibles espacées d'une heure\n    \n  \n\n\n3.4.3.2. Moissonnage\n\nLe mécanisme de moissonnage intervient lorsqu'un nœud producteur ne met pas en œuvre le mécanisme de notification. Dans ce cas de figure, le portail, pour réaliser la mise à jour des métadonnées des différentes jeux, vient chercher, sur chaque nœud producteur, les jeux de données dont les métadonnées ont changé.\n\nLe séquencement des appels entre Portail et nœud producteur est le suivant :\n\n\n  Obtention par le portail d'un token JWT\n  Demande auprès du nœud par le portail des différents jeux de données modifiés depuis une date connue du portail (GET &lt;&gt;/resources avec des paramètres et de la pagination)\n    \n      Réponse du nœud par un code 200 avec une liste d'éléments\n    \n  \n  Pour chaque élément reçu grâce à l'appel précédent, contrôle de la date de dernière modification par rapport à la date connue du portail pour ce jeu de données\n  Si le jeu de données doit être mis à jour, récupération des métadonnées du jeu (GET &lt;&gt;/resources/{global_id})\n    \n      Réponse du nœud par un code 200 avec les métadonnées du jeu de données\n    \n  \n  Enregistrement dans la file d'attente d'une activité de mise à jour (création/modification/suppression)\n  Le portail traite la demande et à l'issue de ce traitement le portail appelle le nœud d'origine pour lui transmettre le rapport d'intégration (PUT &lt;&gt;/resources/report/{global_id}\n    \n      Réponse du portail par un code 200 ou\n      Ou pour les codes 400, 401, 408, 429, 503, 5 nouvelles tentatives possibles espacées d'une heure\n    \n  \n\n\n#\n4. Annexes\n\n4.1. Annexe – Structure des métadonnées\n\nVersion de l'API au moment de l'écriture de ce document:\n\nhttps://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/1.0.3\n\nDernière version de l'API:\n\nhttps://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER\n"
      }
      {
        "title"    : "Rôles",
        "category" : "Glossaire",
        "tags"     : "",
        "url"      : "https://sigrennesmetropole.github.io/rudi_documentation/glossaire/roles/",
        "date"     : "2022-03-22 08:57:04 +0000",
        "excerpt"  : "Les différents rôles sur la plateformes Rudi\n",
        "content"  : "Les différents rôles sur la plateformes Rudi\n\nLes fournisseurs de données pour publier des métadonnées doivent s’authentifier en OAuth2.\n\nPour cela, il faut :\n\n  Déclarer le fournisseur dans RUDI Portail (µPoviders)\n  Déclarer chaque noeud du fournisseur dans RUDI Portail (µPoviders)\n  \n    A chaque noeud est associé un utilisateur de type ROBOT  (µACL). L’utilisateur possède :\n\n    \n      un client_id sous la forme d’un UUID V4\n      un client_secret\n    \n  \n\n\nLe noeud fournisseur peut alors s’authentifier comme suit :\n\n\ncurl -v --request POST http://&lt;server&gt;:&lt;port&gt;/oauth/token --data \"grant_type=password\" --data \"username=&lt;username&gt;\" --data \"password=&lt;client_password&gt;\" --data \"scope=&lt;liste des scopes séparés par des virgules&gt;\" --data \"client_id=&lt;client_id&gt;\" -H \"Authorization:Basic &lt;encodage en base 64 de la chaine &amp;lt:client_id:client_password&gt;\"\n\n\n\n\nContrôle de l’authentification appel du Portail RUDI vers un fournisseur de données\n\nLorsque le portail vient moissonner des données d’un fournisseur de données ou lorsque le portail vient soumettre un rapport d’intégration, l’appel comporte une entête d’authorization de type “Bearer”.\n\nExemple :\n\nAuthorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJydWRpIiwiY29ubmVjdGVkVXNlciI6eyJsb2dpbiI6InJ1ZGkiLCJ0eXBlIjoiUEVSU09OIiwiZmlyc3RuYW1lIjoicnVkaSIsImxhc3RuYW1lIjoicnVkaSIsImVtYWlsIjpudWxsLCJvcmdhbml6YXRpb24iOiJydWRpIiwicm9sZXMiOlsiQURNSU5JU1RSQVRPUiJdfSwiZXhwIjoxNjE0NjE5Nzc2LCJpYXQiOjE2MTQ2MTYxNzZ9.Em7yclposciDOll-Dgv9O6jGDE-GsVEHp9dYKyfYNCyPTAambdGqtnl--Zw0DidCf0_JCghXlpznMIteUPdHnQ\n\n\nLe fournisseur de données peut valider ce token en réalisant l’appel suivant vers le portail :\n\n\ncurl -v --request GET http://&lt;server&gt;:&lt;port&gt;/oauth/check_token?token=&amp;ltvaleur du token&gt;\n\n\nAuthentification des porteurs de projets\n\nLorsqu’un porteur de projet souhaite utiliser un jeu de données exposé par le portail, il peut le faire\n\n  soit en son nom. C’est le cas de tous les jeux de données à accès restreint et c’est aussi le cas si le porteur de projet souhaite une qualité de service particulière. Il est important de noter que pour effectuer ce mode d’authentification, il faut un utilisateur Rudi (création de compte depuis le portail) et que cet utilisateur ait souscrit aux différents jeux de données.\n  soit en tant qu’utilisateur anonyme. Cette possibilité est proposée afin de permettre à un porteur de réaliser des essais rapidement. Le mot de passe de cet utilisateur est “anonymous” et son login est “anonymous”.\n\n\nDans le cas d’une utilisation en tant qu’utilisateur anonyme, il faut :\n\n  s’authentifier auprès du portail en tant que “anonymous” et récupérer un token JWT Rudi\n\n\n\ncurl -v -X POST https://rudi.bzh/token -d \"grant_type=password&amp;username=anonymous&amp;password=anonymous\" -H \"Authorization: Basic TEgxT1o1T3JMZmRFcXlRdkozcEFvUzhieFFNYTpYYWdmOENRdEpzak1UV09pdnBueGxjbTczb0lh\"\n\n\n\n  à partir du token il est alors possible d’accéder aux APIs de téléchargement comme suit :\n\n\nAppel de l’API de téléchargement pour le media souscrit :\n\ncurl -v -X GET  \"https://rudi.bzh/medias/eef6832f-6a06-4f65-8f95-a533ac8926a7/dwnl/1.0.0\" -H \"Authorization: Bearer [l'access token retourné par l'appel précédent]\" \n\n\nPour une accès en son nom propre (éléments en cours de définition coté portail et non disponible actuellement sur rudi.bzh), il faut :\n\n  Se connecter sur le portail avec son compte utilisateur\n  Accéder au détail du compte\n  Activer l’utilisation des APIs\n  Récupérer le couple “customer_key”/customer_secret”\n  Utiliser ce couple pour s’authentifier :\n\n\n\ncurl -kv -X POST -H \"Authorization: Basic [base64(customer_key:customer_secret)]\" -d \"grant_type=client_credentials&amp;username=[login du user sur le portail associé au customer_key]&amp;scope=apim:subscribe apim:app_manage\" -H \"Content-Type:application/x-www-form-urlencoded\" https://rudi.bzh/apim/oauth2/token\n\n\nCet appel permet de récupérer un token.\n\n\n  à partir du token il est alors possible d’accéder aux APIs de téléchargement comme suit :\n\n\n\ncurl -kv -X POST -H \"Authorization: Bearer \" https://rudi.bzh/apim/datasets/02777fcb-c0bd-4d89-830a-8070cfb89261/dwnl/1.0.0\n&lt;/pre&gt;\n\n"
      }]
